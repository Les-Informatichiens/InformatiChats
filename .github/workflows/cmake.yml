name: ci
on:
  pull_request:
  push:
    branches:
      - master
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          # - macos-12
        generator:
          - "Ninja"
        compiler:
          - llvm
          - gcc
          # you can specify the version after `-` like `llvm-13.0.0`.
        include:
          - os: "windows-latest"
            compiler: "msvc"
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/llvm
            ~/cpm-cache
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          ccache: false
          cmake: false
          ninja: false
          doxygen: false
          vcpkg: false
          cppcheck: false
          clangtidy: false # instead of `true`, which chooses the default version, you can pass a specific version.
          clangformat: false
          # ...

      - name: Configure CMake
        run: |
          cmake -DCPM_SOURCE_CACHE=~/cpm-cache -S . -B ./build -D CMAKE_C_COMPILER=${{ matrix.config.cc }} -D CMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DUSE_CCACHE=YES -DCCACHE_OPTIONS="CCACHE_CPP2=true;CCACHE_SLOPPINESS=clang_index_store" -G "Ninja"
          
      - name: Build CMake
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build -j 14

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}
