name: ci
on:
  pull_request:
  push:
    branches:
      - master
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Build-Linux:
    runs-on: self-hosted
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Setup Linux
        run: |
        # sudo apt-get update -y
        # sudo apt-get install -y ninja-build libgl1-mesa-dev libegl1-mesa-dev xorg-dev libglu1-mesa-dev

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/cpm-cache
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
          restore-keys: |
            ${{ runner.os }}-cpm-


      - name: Configure CMake
        run: |
          cmake -DCPM_SOURCE_CACHE=~/cpm-cache -S . -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Ninja"

      - name: Build CMake
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build

  Build-Windows:
      runs-on: self-hosted
      strategy:
        fail-fast: false

      steps:
        - uses: actions/checkout@v3

        - name: Install Mingw32 cross-compiler
          run: |
          #  sudo apt-get update
          #  sudo apt-get install -y mingw-w64
          #  export PATH="/usr/share/mingw-w64/bin:$PATH"

        - name: Build App
          run: |
              cmake -DCPM_SOURCE_CACHE=~/cpm-cache -S . -B ./build-windows -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Ninja"
              cmake --build ./build-windows

        - name: Set up cache
          uses: actions/cache@v3
          with:
            path: |
              ~/cpm-cache
            key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
            restore-keys: |
              ${{ runner.os }}-cpm-
  
      
