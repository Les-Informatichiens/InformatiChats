//
// Created by thierrycd on 2023-12-31.
//

#pragma once

#include "Model/ConfigUtils/IConfigGenerator.h"
#include "Model/DataAccess/IConfigAPI.h"
#include "Model/Models/ConfigSchema.h"
#include <iostream>
#include <optional>


class ConfigLogic
{
public:
    ConfigLogic(ConfigSchema& configSchema_, IConfigAPI& configAPI, IConfigGenerator& configGenerator)
        : configSchema(configSchema_), configAPI(configAPI), configGenerator(configGenerator){};

    void SetupConfig() const
    {
        this->GenerateConfig();
        this->configAPI.LoadConfig();
        this->ApplyConfig();
    }

    template<typename T>
    [[nodiscard]] std::optional<T> GetConfigValue(const std::string& key) const
    {
        auto it = std::find_if(this->configSchema.entries.begin(), this->configSchema.entries.end(),
                               [&key](const ConfigEntry& entry) { return entry.GetName() == key; });

        if (it == this->configSchema.entries.end())
        {
            std::cerr << "Config entry " << key << " not found" << std::endl;
            return std::nullopt;
        }

        ConfigType val = it->GetValue();

        if (!std::holds_alternative<T>(val))
        {
            std::cerr << "Config entry " << key << " is not of type " << typeid(T).name() << std::endl;
            return std::nullopt;
        }

        return std::get<T>(val);
    }

    [[nodiscard]] std::vector<ConfigEntry> GetConfigs() const
    {
        return this->configSchema.entries;
    }

    [[nodiscard]] bool IsCurrentlyEditingConfigs() const
    {
        return this->currentlyEditingConfigs;
    }

    void SetIsCurrentlyEditingConfigs(bool currentlyEditingConfigs_)
    {
        this->currentlyEditingConfigs = currentlyEditingConfigs_;
    }

private:
    void GenerateConfig() const
    {
        this->configSchema.entries = this->configGenerator.GenerateConfig();
    }

    void ApplyConfig() const
    {
        //try to set the value of each config entry generated by the config generator
        //to the value stored in the configAPI, if the values in the config API are not
        //valid, keep the generated value
    }

private:
    ConfigSchema& configSchema;
    IConfigAPI& configAPI;
    IConfigGenerator& configGenerator;

    bool currentlyEditingConfigs = false;
};
